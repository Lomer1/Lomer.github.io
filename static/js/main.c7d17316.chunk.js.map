{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/Todos.Page.tsx","pages/AboutPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","react_default","a","createElement","className","href","dist","to","TodoForm","props","ref","useRef","type","id","onKeyPress","event","key","onAdd","current","value","htmlFor","TodoList","_ref","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onChange","title","onClick","preventDefault","removeHandler","TodosPage","_useState","useState","_useState2","Object","slicedToArray","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","Fragment","TodoForm_TodoForm","newTodo","Date","now","prev","concat","toConsumableArray","TodoList_TodoList","console","log","window","confirm","filter","AboutPage","history","useNavigate","App","Navbar_Navbar","react_router_dist","element","Todos_Page_TodosPage","path","AboutPage_AboutPage","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.c7d17316.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport  const Navbar: React.FC = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper  indigo darken-4 px1\">\r\n            <a href=\"/\" className=\"brand-logo\">Type</a>\r\n            <ul className=\"right hide-on-med-and-down\">\r\n                <li><a href=\"sass.html\">Sass</a></li>\r\n                <li><NavLink to=\"/\">TODOS</NavLink></li>\r\n                <li><NavLink to=\"/about\">About</NavLink></li>\r\n            </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React, {useRef} from \"react\";\r\n\r\ninterface TodoFormProps {\r\n    onAdd(titlel: string): void\r\n}\r\n\r\nexport  const TodoForm: React.FC<TodoFormProps> = (props) => {\r\n\r\n    const ref = useRef<HTMLInputElement>(null)\r\n\r\n   // const [title, setTitle] = useState<string>('')\r\n\r\n   // const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n     //   setTitle(event.target.value)\r\n    //}\r\n\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Enter') {\r\n         //   console.log(title)\r\n         //   setTitle('')\r\n         props.onAdd(ref.current!.value)\r\n         ref.current!.value = ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row mt2\">\r\n            <div className=\"col s12\">\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                    <input\r\n            //        onChange={changeHandler} \r\n            //        value = {title} \r\n                    ref = {ref}\r\n                    type=\"text\" \r\n                    id=\"autocomplete-input\" \r\n                    className=\"autocomplete\"\r\n                    onKeyPress={keyPressHandler}\r\n                    />\r\n                    <label htmlFor=\"autocomplete-input\" className=\"active\">Название</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { ITodo } from '../interfaces'\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[]\r\n    onToggle(id: number): void\r\n    onRemove: (id: number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({todos, onRemove, onToggle}) => {\r\n\r\nconst removeHandler = (event: React.MouseEvent, id: number) => {\r\n    event.preventDefault()\r\n    onRemove(id)\r\n}\r\n\r\n\r\nif (todos.length === 0) {\r\n    return <p className=\"center\" >Задач нет</p>\r\n}\r\n    return (\r\n        <ul>\r\n            {todos.map(todo => {\r\n                const classes = ['todo']\r\n                if (todo.completed) {\r\n                    classes.push('copmleted')\r\n                }\r\n\r\n                return ( \r\n                    <li className={classes.join(' ')} key={todo.id}>\r\n                        <label>\r\n                            <input type=\"checkbox\" checked={todo.completed} onChange={() => onToggle( todo.id)} />\r\n                            <span>{todo.title}</span>\r\n                            <i className='material-icons red-text' onClick={event => removeHandler(event, todo.id)} >delete</i>\r\n                        </label>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { TodoForm } from '../components/TodoForm';\r\nimport { TodoList } from '../components/TodoList';\r\nimport { ITodo } from '../interfaces';\r\n\r\n\r\nexport const TodosPage: React.FC = () => {\r\n\r\n\r\n    const [todos, setTodos] = useState<ITodo[]>([])\r\n  \r\n\r\n    useEffect(() => {\r\n      const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\r\n      setTodos(saved)\r\n    }, [])\r\n  \r\n    useEffect(() => {\r\n      if (todos.length > 0) {\r\n      localStorage.setItem('todos', JSON.stringify(todos))}\r\n    }, [todos])\r\n  \r\n  \r\n    const addHandler = (title: string) => {\r\n      const newTodo: ITodo = {\r\n        title: title,\r\n        id: Date.now(),\r\n        completed: false\r\n      }\r\n      //setTodos([newTodo,...todos])\r\n      setTodos(prev => [newTodo, ...todos])\r\n    }\r\n  \r\n    const toggleHandler = (id: number) => {\r\n      setTodos(todos.map(todo => {\r\n          if (todo.id === id) {\r\n            todo.completed = !todo.completed\r\n            console.log(todo.completed)\r\n          }\r\n          return todo\r\n        })\r\n      )\r\n    }\r\n  \r\n    const removeHandler = (id: number) => {\r\n      const shouldRemove = window.confirm('Точно?')\r\n      if (shouldRemove) {\r\n        setTodos(prev => prev.filter(todo => todo.id !== id))\r\n      }\r\n    }\r\n  \r\n\r\n    return <>\r\n        <TodoForm onAdd = {addHandler}/>\r\n\r\n        <TodoList \r\n        todos = {todos} \r\n        onToggle={toggleHandler} \r\n        onRemove={removeHandler} \r\n        />\r\n    </>\r\n}","import React from 'react'\r\nimport { useNavigate} from 'react-router-dom'\r\n\r\nexport const AboutPage: React.FC = () => {\r\n    const history =  useNavigate()\r\n    return( \r\n    <>\r\n        <h1>BYajhvf</h1>\r\n        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Delectus qui doloremque saepe similique quo, perspiciatis atque hic iste itaque voluptas ipsum sint et, ea error aspernatur nobis eligendi reprehenderit porro.</p>\r\n        <button className='btn' onClick={() => history('/')}>К списку дел</button>\r\n    </>\r\n    )\r\n}","import React from 'react';\r\nimport { Navbar } from './components/Navbar';\r\nimport {BrowserRouter, Routes, Route} from 'react-router-dom'\r\nimport { TodosPage } from './pages/Todos.Page';\r\nimport { AboutPage } from './pages/AboutPage';\r\n\r\nconst App: React.FC = () => {\r\n\r\n \r\n  return (\r\n  <BrowserRouter>\r\n      <Navbar/>\r\n      <div className='container'>\r\n        <Routes>\r\n          <Route element = {<TodosPage/>} path = \"/\" />\r\n          <Route element = {<AboutPage/>} path = \"/about\" />\r\n        </Routes>\r\n      </div>\r\n  </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}